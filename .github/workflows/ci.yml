name: ci

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  WORKING_DIR: "terraform/"

jobs:
  plan:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}

    steps:
      - name: new pull request
        if: github.event_name == 'pull_request' && github.event.action == 'opened'
        uses: actions/github-script@f05a81df23035049204b043b50c3322045ce7eb3 # pin@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const commentBody = `\
            ### üëã Thanks for opening a pull request!

            If you are new, please check out the [deployment process](https://github.com/the-hideout/cloudflare#deployment-) to understand how to deploy this pull request. A trimmed down summary will be listed below:

            1. üëÄ Observe the CI output on this pull request to ensure it is passing and doing what it is supposed to do
            1. ‚úîÔ∏è Obtain an approval/review on this pull request
            1. üöÄ Branch deploy your pull request to production - [example](https://github.com/the-hideout/cloudflare/pull/11)

              > Comment \`.deploy\` on this pull request to trigger a deploy. If anything goes wrong, rollback with \`.deploy main\`

            1. üéâ Merge!
            `

            await github.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body: commentBody
            })

      - uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # pin@v2

      - uses: hashicorp/setup-terraform@ed3a0531877aca392eb870f440d9ae7aba83a6bd # pin@v1
        with:
          terraform_version: 1.1.7
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform init
        id: init
        run: terraform init

      - name: Terraform validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform plan
        id: plan
        env:
          TF_VAR_CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}
        run: terraform plan -no-color
        continue-on-error: true

      # Post comment on PR with development plan info
      - uses: actions/github-script@5d03ada4b0a753e9460b312e61cc4f8fdeacf163 # pin@0.9.0
        env:
          PLAN: "terraform ${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `### Terraform Plan - Production ü™ê
            - Terraform Format and Style üñå: \`${{ steps.fmt.outcome }}\`
            - Terraform Initialization ‚öôÔ∏è: \`${{ steps.init.outcome }}\`
            - Terraform Validation ü§ñ: \`${{ steps.validate.outcome }}\`
            - Terraform Plan üìñ: \`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`${process.env.PLAN}\`\`\`

            </details>

            > Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`terraform/\`, Workflow: \`${{ github.workflow }}\``;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  deploy:
    if: github.event_name == 'push'
    environment: production
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}

    steps:
      - uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # pin@v2

      - uses: hashicorp/setup-terraform@ed3a0531877aca392eb870f440d9ae7aba83a6bd # pin@v1
        with:
          terraform_version: 1.1.7
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform init
        run: terraform init

      - name: Terraform apply
        env:
          TF_VAR_CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}
        run: terraform apply -auto-approve
